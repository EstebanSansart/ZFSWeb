// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(APIContext))]
    [Migration("20231018130242_InitialCreateMigrations")]
    partial class InitialCreateMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("company_contact");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("company_name");

                    b.HasKey("CompanyId");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("event_capacity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("event_date");

                    b.Property<string>("EventPoints")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("event_points");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("event_name");

                    b.Property<string>("Sponsorship")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("event_sponsorship");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("event_state");

                    b.HasKey("EventId");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EventAttendance", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("UserCc")
                        .HasColumnType("varchar(255)");

                    b.HasKey("EventId", "UserCc");

                    b.HasIndex("UserCc");

                    b.ToTable("event_attendance", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gender_id");

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gender_type");

                    b.HasKey("GenderId");

                    b.ToTable("gender", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.HasKey("ImageId");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("level_id");

                    b.Property<string>("CurrentPoints")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("level_current_points");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int")
                        .HasColumnName("level_number");

                    b.HasKey("LevelId");

                    b.ToTable("level", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reaction_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reaction_name");

                    b.HasKey("ReactionId");

                    b.ToTable("reaction", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tag_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tag_name");

                    b.HasKey("TagId");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("UserCc")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_cc");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_age");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_contact");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("UserCc");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LevelId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserReaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<string>("UserCc")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ReactionId", "UserCc");

                    b.HasIndex("UserCc");

                    b.ToTable("user_reaction", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("UserCc")
                        .HasColumnType("varchar(255)");

                    b.HasKey("TagId", "UserCc");

                    b.HasIndex("UserCc");

                    b.ToTable("user_tag", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EventAttendance", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithMany("EventAttendances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("EventAttendances")
                        .HasForeignKey("UserCc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Level", "Level")
                        .WithMany("Users")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Gender");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Domain.Entities.UserReaction", b =>
                {
                    b.HasOne("Domain.Entities.Reaction", "Reaction")
                        .WithMany("UserReactions")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserReactions")
                        .HasForeignKey("UserCc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserTag", b =>
                {
                    b.HasOne("Domain.Entities.Tag", "Tag")
                        .WithMany("UserTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserCc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Navigation("EventAttendances");
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Level", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Reaction", b =>
                {
                    b.Navigation("UserReactions");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("EventAttendances");

                    b.Navigation("UserReactions");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
